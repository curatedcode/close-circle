// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String
  profileId     String       @unique @default(cuid())
  email         String?      @unique
  emailVerified DateTime?
  image         String?      
  bio           String?      @db.VarChar(160)
  accounts      Account[]
  sessions      Session[]
  friendedBy    Friends[] @relation("friendedBy")
  friends       Friends[] @relation("friends")
  posts         Post[]
  postLikes     PostLike[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Friends {
  id         String    @id @default(cuid())
  user       User      @relation("friends", fields: [userId], references: [id])
  userId     String
  friend     User      @relation("friendedBy", fields: [friendId], references: [id])
  friendId   String

  @@unique([friendId, userId])
  @@index([userId])
}

model Post {
  id         String       @id @default(cuid())
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  body       String?      @db.VarChar(280)
  likes      PostLike[]
  comments   Comment[]
  images     PostImage[]
  createdAt  DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}

model PostLike {
  id         String    @id @default(cuid())
  post       Post      @relation(fields: [postId], references: [id])
  postId     String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([postId, userId])
  @@index([userId])
}

model Comment {
  id         String    @id @default(cuid())
  body       String    @db.VarChar(280)
  post       Post      @relation(fields: [postId], references: [id])
  postId     String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([postId])
}

model PostImage {
  id         String    @id @default(cuid())
  url        String
  post       Post      @relation(fields: [postId], references: [id])
  postId     String
  createdAt  DateTime  @default(now())

  @@index([postId])
}